 Build me a world-class AI-powered plagiarism checker website.

🧠 PURPOSE: This site will help users detect plagiarism in academic, corporate, and creative writing by comparing uploaded or pasted text against AI-enhanced databases and public sources.

📥 Input Types Supported:

Copy-pasted plain text

.txt files

.docx (Word documents)

.pdf files

🎨 Design Style & UI/UX Requirements:

Ultra-modern, clean, and professional interface

Animations on transitions (e.g., fade-in results, loader pulse)

Dynamic progress bars while checking text

Widgets like "Plagiarism Heatmap", "Similarity Graph", "Paraphrase Suggestions"

Clear typography (Inter or SF Pro), readable in both light/dark themes

Responsive: mobile-first with tablet and desktop scaling

CTA buttons: "Upload File", "Paste Text", "Get Report", "Rephrase"

Toggle for language detection + dark/light mode

🎯 Functional Requirements:

Upload & extract text from supported files (txt, docx, pdf)

Paste plain text directly

Run AI-based semantic comparison with LLM + vector search

Detect paraphrased plagiarism (not just copy-paste)

Show percentage match + highlight matching phrases

Offer paraphrasing suggestions for flagged areas

Export plagiarism report as PDF

🧱 Tech Stack (Backend suggestion):

Use Python (FastAPI) or Node.js with Bun

Use LangChain or LlamaIndex for embedding/semantic search

Embeddings via OpenAI, bge-small, or Instructor-XL

Vector DB: Qdrant or Chroma

PDF/Docx parsers: pdfminer, docx, or Unstructured.io

🌐 Hosting & Infra (Frontend & Backend):

Frontend: Next.js 14 + TailwindCSS + ShadCN/UI

Deploy via Vercel (frontend) + Railway/Fly.io (backend)

Use Postgres (Neon or Supabase) for file metadata

Include file size limiter and serverless file parsing

🔐 Security / Privacy Considerations:

All uploads stored securely (temp or in-memory)

Do not retain uploaded content unless user opts in

Include disclaimer: “We do not store your documents”

Add rate-limiting, JWT auth if needed

🔎 Advanced Detection Techniques:

Detect AI-generated text using burstiness/perplexity

Compare across semantic meaning, not just string matches

Show “reworded matches” alongside direct copy matches

🎁 Bonus Suggestions (Optional):

Add “AI Report Summary” feature that briefly explains findings

Allow login for tracking multiple reports

Theme: Sci-fi / Academic hybrid look (animated background, orbiting nodes)

✨ Final Goal: Deliver an advanced plagiarism checker with the highest design standards, intuitive UX, and powerful AI under the hood.
Features for First Version:
Modern hero section with animated background
Multi-input support (paste text, upload files)
Beautiful progress indicators with animations
Plagiarism results with highlight heatmap
Paraphrasing suggestions panel
Export report functionality
Responsive design with dark/light themes
Professional typography and micro-interactions
Design System:
Colors: Deep blue to purple gradient (trust + AI), red accents for plagiarism highlights, green for original content
Typography: Inter font for clean readability
Animations: Smooth transitions, pulse effects, fade-ins
Layout: Card-based design with floating elements and subtle shadows
after building conduct a comprehensive QA test of the plagiarism checker with the highest standards. Let me check for any console errors first, then systematically test each component.
buttons like features ,about,sign in,pricing,get started and these Product
Features
Pricing
API
Integrations
Support
Help Center
Documentation
Contact Ush
System Status
Legal
Privacy Policy
Terms of Service
Security
Compliance
when i click them 
so some animations would be awesome on landing page
also all type of qa test be done on everything and highest quality and standards